//# CPUPROFILE=./tmp/main.cpp ./main.cpp
//C++
#include <ctime>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <math.h>
#include <memory>
#include <numeric>
#include <stdio.h>
#include <stdlib.h> /* srand, rand */
#include <string>
#include <sys/stat.h>
#include <time.h> /* time */
#include <vector>

//Boost
//include "/usr/local/include/boost/algorithm/string.hpp"

//Root
#include "TApplication.h"
#include "TAxis.h"
#include "TCanvas.h"
#include "TColor.h"
#include "TFile.h"
#include "TGFrame.h"
#include "TGraph.h"
#include "TH1D.h"
#include "TH2F.h"
#include "THStack.h"
#include "TLatex.h"
#include "TLegend.h"
#include "TMultiGraph.h"
#include "TPDF.h"
#include "TPad.h"
#include "TPaveLabel.h"
#include "TPaveStats.h"
#include "TPaveText.h"
#include "TROOT.h"
#include "TRandom2.h"
#include "TSpline.h"
#include "TString.h"
#include "TStyle.h"
#include "TVirtualPad.h"

//Classes
#include "aerogelClass.h"
#include "detectedEventClass.h"
#include "detectorClass.h"
#include "directionClass.h"
#include "interpolatorClass.h"
#include "pmtClass.h"
#include "positionClass.h"
#include "randomEventClass.h"

//NameSpaces
#include "graphFunctionsNamespace.h"

double calcStepSize(double start, double end, double step) {
  return (end - start) / (step - 1);
}
int main(int argc, char **argv) {
  std::cout << "ARGUMENTS 1 = filename" << std::endl;
  std::cout << "ARGUMENTS 2 = Interpolation Type" << std::endl;


  int interpolateMeanLinearly = 0;
  int interpolateMeansLinearlyWithSpline = 1;
  int interpolateMeansLinearlyWithGaussianFit = 2;

  //Mass
  double pionMass = 137.2735; //MeV/c^2
  double kaonMass = 495.665;  //MeV/c^2

  //Position
  double aeroWidth = .12;     //m
  double aeroLength = .12;    //m
  double aeroThickness = .02; //m

  //Refractive Index
  double n1 = 1.010;
  double n2 = 1.012;

  /*Aerogel Parameters*/
  std::shared_ptr<Aerogel> aero1(std::make_shared<Aerogel>(aeroWidth, aeroLength, aeroThickness, n1));
  std::shared_ptr<Aerogel> aero2(std::make_shared<Aerogel>(aeroWidth, aeroLength, aeroThickness, n2));
  std::vector<std::shared_ptr<Aerogel>> aerogels;
  aerogels.push_back(aero1);
  aerogels.push_back(aero2);

  /*PMT Parameters*/
  double multiplePMTs = 4;                       // THIS IS A HACK IDEALLY IT SHOULD BE THAT YOU MAKE MULTIPLE PMT Objects //#CHANGE=1
  double pmtWidth = multiplePMTs * 48.5 / 1000;  //m
  double pmtLength = multiplePMTs * 48.5 / 1000; //m
  int pixelN = std::pow(multiplePMTs * 8, 2);
  std::shared_ptr<PMT> pmt(std::make_shared<PMT>(pmtWidth, pmtLength, pixelN));
  std::cout << argv[1] <<std::endl;
  std::cout << argv[2] << std::endl;
  std::string filename = "MeanInterpolationDataBank_database_2018Jan26.txt";
  std::shared_ptr<InterpolateLikelihood> linearInter(std::make_shared<InterpolateLikelihood>(filename));

  std::shared_ptr<Detector> detector(std::make_shared<Detector>(aerogels, pmt, .09)); //.06)); //CHANGE=.09

  int eventCount = 10000;

  //Momentum
  double startMomentum = 4000;
  double endMomentum = 11000;
  double momentumCount = 1;
  double stepMomentum = calcStepSize(startMomentum, endMomentum, momentumCount);

  //Beta
  double startBeta = .988; //FORCES TO BE SHOWN
  double endBeta = 1.0;
  double betaCount = 100;
  double stepBeta = calcStepSize(startBeta, endBeta, betaCount);
  bool betaBool = false;
  double betaCounter = startBeta;
  std::cout << "BETA:" << stepBeta << std::endl;

  //Phi
  double startPhi = 0.7;
  double endPhi = TMath::Pi() / 4; //2*TMath::Pi()/4;//radians => max = 2*PI
  double phiCount = 1;
  double stepPhi = calcStepSize(startPhi, endPhi, phiCount);
  std::cout << "PHI:" << stepPhi << std::endl;

  //Theta
  double startTheta = 0.2; //-TMath::Pi()/4;//radians
  double endTheta = 0.4;   //TMath::Pi()/4;//radians
  double thetaCount = 1;
  double stepTheta = calcStepSize(startTheta, endTheta, thetaCount);
  std::cout << "THETA " << stepTheta << std::endl;

  //Position
  double beamx = 0.07;                //m //#CHANGE=.06
  double beamy = 0.07;                //m //#CHANGE=.06
  double pixelDist = 48.5 / (8000.0); //dimensions of a pixel
  int beamCountX = 1;
  int beamCountY = 1;
  double beamStepX = calcStepSize(beamx, beamx + pixelDist, beamCountX);
  double beamStepY = calcStepSize(beamy, beamy + pixelDist, beamCountY);
  double beamz = 0.00; //m //#CHANGE=.00

  double darknoise = pmt->getDarkNoise();

  bool saveAllInSingleFolder = true;
  bool completed = false;

  beamx = 0.098;
  beamy = 0.098;
  startTheta = 0.3;
  startPhi = 0.6;
  betaBool = false;
  startMomentum = 5000;

  double x = beamx;
  double y = beamy;
  double t = startTheta;
  double p = startPhi;
  double i = 0;

  if (betaBool == true) {
    i = betaCounter;
  } else {
    i = startMomentum;
  }

  std::cout << "x: " << beamx << std::endl;
  std::cout << "y: " << beamy << std::endl;
  std::cout << "theta: " << startTheta << std::endl;
  std::cout << "phi: " << startPhi << std::endl;
  std::cout << "beta: " << i << std::endl;

  std::clock_t begin = std::clock();

  //std::shared_ptr<Position> pos(std::make_shared<Position>(x, y, beamz));
  //std::shared_ptr<Direction> dir(std::make_shared<Direction>(t, p));
  //std::shared_ptr<Beam> beam;

  //if (betaBool == true) {
  //beam = std::make_shared<Beam>(i, dir, pos);
  //beam->setParticleMass(pionMass);
  //} else {
  //beam = std::make_shared<Beam>(i, pionMass, dir, pos);
  //}

  //std::vector<double> variablesPion;
  //variablesPion.reserve(5);
  //variablesPion.push_back(x);               //x
  //variablesPion.push_back(y);               //y
  //variablesPion.push_back(t);               //theta
  //variablesPion.push_back(p);               //phi
  //variablesPion.push_back(beam->getBeta()); //beta

  //std::vector<std::vector<std::shared_ptr<DetectedEvent>>> dE = detector->getDetectedEvents(beam, eventCount);
  //std::vector<std::vector<double>> pixelHits = detector->getPixelHitsPerEvents(dE, false);
  //std::vector<double> mean = detector->getMeanPerPixel(pixelHits);

  //mean = graphingAndAnalysisCherenkovPID::organizeMeans(mean, pmt);
  //while (!completed) {
  std::vector<double> beta;
  std::vector<std::vector<double>> meanLIST;
  std::vector<std::vector<double>> meanSplineLIST;
  std::vector<std::vector<double>> deltaLIST;
  //int counterStop = 1;
  //int counter = 0;
  while (betaCounter <= endBeta) { //counter <= counterStop
    //std::cout << "Input x Value: ";
    //std::cin >> beamx;

    //std::cout << "Input y Value: ";
    //std::cin >> beamy;

    //std::cout << "Input theta Value: ";
    //std::cin >> startTheta;

    //std::cout << "Input phi Value: ";
    //std::cin >> startPhi;

    //std::string betaAnswer;
    //std::cout << "Beta [y/n]?:";
    //std::cin >> betaAnswer;
    //if (betaAnswer == std::string("y")) {
    //std::cout << "Input beta Value: ";
    //std::cin >> startBeta;
    //betaBool = true;
    //} else if (betaAnswer == std::string("n")) {
    //std::cout << "Input momentum Value [MeV]: ";
    //std::cin >> startMomentum;
    //betaBool = false;
    //}

    beamx = 0.097;
    beamy = 0.097;
    startTheta = 0;
    startPhi = 0;
    betaBool = true;
    startMomentum = 5000;

    //std::cout << "Test each Pixel [y/n]?";
    //std::string eachPixelAnswer;
    //std::cin >> eachPixelAnswer;
    bool testPixel = false;
    //if (eachPixelAnswer == std::string("y")) {
    //testPixel = true;
    //} else if (eachPixelAnswer == std::string("n")) {
    //testPixel = false;
    //}

    //std::cout << "Test Variable [beta/x/y/theta/phi/none]?:";
    std::string variableLikelihoodName = "none";
    //std::cin >> variableLikelihoodName;

    double x = beamx;
    double y = beamy;
    double t = startTheta;
    double p = startPhi;
    double i = 0;

    if (betaBool == true) {
      i = betaCounter;
    } else {
      i = startMomentum;
    }
    beta.push_back(betaCounter); //counter

    std::cout << "x: " << beamx << std::endl;
    std::cout << "y: " << beamy << std::endl;
    std::cout << "theta: " << startTheta << std::endl;
    std::cout << "phi: " << startPhi << std::endl;
    std::cout << "beta: " << i << std::endl;

    std::clock_t begin = std::clock();

    std::shared_ptr<Position> pos(std::make_shared<Position>(x, y, beamz));
    std::shared_ptr<Direction> dir(std::make_shared<Direction>(t, p));
    std::shared_ptr<Beam> beamPion;

    if (betaBool == true) {
      beamPion = std::make_shared<Beam>(i, dir, pos);
      beamPion->setParticleMass(pionMass);
    } else {
      beamPion = std::make_shared<Beam>(i, pionMass, dir, pos);
    }

    std::vector<double> variablesPion;
    variablesPion.reserve(5);
    variablesPion.push_back(x);                   //x
    variablesPion.push_back(y);                   //y
    variablesPion.push_back(t);                   //theta
    variablesPion.push_back(p);                   //phi
    variablesPion.push_back(beamPion->getBeta()); //beta

    //std::vector<std::vector<std::shared_ptr<DetectedEvent>>> dEPion = detector->getDetectedEvents(beamPion, eventCount);
    //std::vector<std::vector<double>> pixelHitsPion = detector->getPixelHitsPerEvents(dEPion, false);
    //std::vector<double> meanPion = detector->getMeanPerPixel(pixelHitsPion);

    std::string variableNames = graphingAndAnalysisCherenkovPID::getFileName(betaBool, beamPion); //Should return the same for beamPion or beamKaon

    //pixelHitsPion = graphingAndAnalysisCherenkovPID::quickOrg(pixelHitsPion);

    //meanPion = graphingAndAnalysisCherenkovPID::organizeMeans(meanPion, pmt);

    std::vector<double> delta;
    //for (int i = 0; i < meanPion.size(); i++) {
    //delta.push_back(meanPion[i] - mean[i]);
    //}

    //meanLIST.push_back(meanPion);
    deltaLIST.push_back(delta);

    //graphingAndAnalysisCherenkovPID::saveHistogramOfMean(meanPion, pmt, variableNames + "");
    std::vector<double> meanInterpPion;
    std::vector<bool> variableSwitch;
    variableSwitch.push_back(false);
    variableSwitch.push_back(false);
    variableSwitch.push_back(false);
    variableSwitch.push_back(false);
    variableSwitch.push_back(true);

    meanInterpPion = linearInter->interpolationSwitch(variablesPion, std::atoi(argv[2]), variableSwitch,
                                                      detector->getPMT()->getWidthPixelCount(), detector->getTotalDistance(),
                                                      detector->getMaxWidth(), detector->getMaxLength(),
                                                      detector->getPMT()->getWidthPixel(), detector->getPMT()->getLengthPixel());
    std::cout << meanInterpPion.size() << std::endl;
    meanLIST.push_back(meanInterpPion);

    //std::vector<double> meanInterpBetaSplinePion;
    //std::vector<bool> variableSwitchSpline;
    //variableSwitchSpline.push_back(false);
    //variableSwitchSpline.push_back(false);
    //variableSwitchSpline.push_back(false);
    //variableSwitchSpline.push_back(false);
    //variableSwitchSpline.push_back(true);

    //meanInterpBetaSplinePion = linearInter->interpolationSwitch(variablesPion, interpolateMeansLinearlyWithSpline, variableSwitchSpline,
    //detector->getPMT()->getWidthPixelCount(), detector->getTotalDistance(),
    //detector->getMaxWidth(), detector->getMaxLength(),
    //detector->getPMT()->getWidthPixel(), detector->getPMT()->getLengthPixel());
    //meanSplineLIST.push_back(meanInterpBetaSplinePion);

    std::cout << "x: " << x << "    ";
    std::cout << "y: " << y << "    ";
    std::cout << "pionP: " << beamPion->getMomentum() << "     ";
    std::cout << "pionB: " << beamPion->getBeta() << "     ";
    std::cout << "theta: " << t << "    ";
    std::cout << "phi: " << p << "    ";
    std::cout << std::endl;

    //std::vector<std::vector<double>> v;
    //std::vector<std::vector<double>> v_err;
    //std::vector<std::vector<double>> v_war;
    //std::vector<double> ll;
    //detector->getLogLikelihoodForVariableAndWparameterSingleParticle(pixelHitsPion, meanInterpPion, v, v_err, v_war, ll, beamPion, linearInter, "PION");

    //graphingAndAnalysisCherenkovPID::saveParameterAndLikelihood(variableNames + "wParaMeter_test_Pion",
    //betaBool, beamPion,
    //v,
    //v_err,
    //v_war,
    //ll);

    std::clock_t end = std::clock();
    double elapsed_secs = double(end - begin) / CLOCKS_PER_SEC;
    std::cout << "TIME THE CODE TOOK:" << elapsed_secs << std::endl;
    //std::string completeAnswer;
    //std::cout << "Complete [y/n]?:";
    //std::cin >> completeAnswer;
    //if (completeAnswer == std::string("y")) {
    //completed = true;
    //} else if (completeAnswer.c_str() == std::string("n")) {
    //completed = false;
    //}
    //}
    betaCounter += stepBeta;
    //counter++;
  }
  //std::string fileName = "betaMeanScan_Finer_Scan_LinearInterpolator_ONLYBETA_.988_.999_15Steps.txt";
  //graphingAndAnalysisCherenkovPID::saveEachPixelMeanVsParameter(fileName, meanLIST, deltaLIST, beta);
  std::string fileName = argv[1];
  graphingAndAnalysisCherenkovPID::saveEachPixelMeanVsParameter(fileName, meanLIST, deltaLIST, beta);
}
//}
